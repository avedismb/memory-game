{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["listOfCards","id","key","App","useState","turn","setTurn","cardsSelected","setCardsSelected","guessCards","setGuessCards","gameIsFinished","length","onClick","map","item","idx","alreadyGuess","includes","isBeingSelcted","some","x","setTimeout","onClickCard","style","backgroundColor","margin","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAAe,I,MCITA,EAAc,CAClB,CAAEC,GAAI,MAAOC,IAAK,GAClB,CAAED,GAAI,QAASC,IAAK,GACpB,CAAED,GAAI,SAAUC,IAAK,GACrB,CAAED,GAAI,OAAQC,IAAK,GACnB,CAAED,GAAI,MAAOC,IAAK,GAClB,CAAED,GAAI,QAASC,IAAK,GACpB,CAAED,GAAI,SAAUC,IAAK,GACrB,CAAED,GAAI,OAAQC,IAAK,IAyDNC,MAtDf,WACE,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAqBMC,EAAqC,EAApBF,EAAWG,SAAeZ,EAAYY,OAE7D,OACE,gCACE,4CACA,wDACA,iDAAoBP,EAAO,MAAQ,UAClCM,GAAkB,qBAAKE,QAbR,WAClBP,GAAQ,GACRE,EAAiB,IACjBE,EAAc,KAUO,qBAClBV,EAAYc,KAAI,SAACC,EAAMC,GACtB,IAAMC,EAAeR,EAAWS,SAASH,EAAKd,IACxCkB,EAAiBZ,EAAca,MAAK,SAAAC,GAAC,OAAIA,EAAEnB,MAAQa,EAAKb,OAC9D,OACE,wBAEEW,QAAS,kBAjCC,SAAAE,GAClBP,EAAiB,GAAD,mBAAKD,GAAL,CAAoBQ,KACpCO,YAAW,WACoB,IAAzBf,EAAcK,SAChBN,GAASD,GACTG,EAAiB,IACbD,EAAc,GAAGN,KAAOc,EAAKd,IAC/BS,EAAc,GAAD,mBAAKD,GAAL,CAAiBM,EAAKd,SAGtC,KAuBoBsB,CAAYR,IAC3BS,MAAO,CAAEC,gBAAiB,OAAQC,OAAQ,GAC1CC,SAAUV,GAAgBE,EAJ5B,SAMGA,EACG,eACAF,EACA,mBACA,QATCD,UCxCFY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6c554817.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import \"./App.css\";\nimport logo from \"./logo.svg\";\nimport { useState } from \"react\";\n\nconst listOfCards = [\n  { id: \"Red\", key: 1 },\n  { id: \"Green\", key: 2 },\n  { id: \"Orange\", key: 3 },\n  { id: \"Blue\", key: 4 },\n  { id: \"Red\", key: 5 },\n  { id: \"Green\", key: 6 },\n  { id: \"Orange\", key: 7 },\n  { id: \"Blue\", key: 8 }\n];\n\nfunction App() {\n  const [turn, setTurn] = useState(true);\n  const [cardsSelected, setCardsSelected] = useState([]);\n  const [guessCards, setGuessCards] = useState([]);\n\n  const onClickCard = item => {\n    setCardsSelected([...cardsSelected, item]);\n    setTimeout(() => {\n      if (cardsSelected.length === 1) {\n        setTurn(!turn);\n        setCardsSelected([]);\n        if (cardsSelected[0].id === item.id) {\n          setGuessCards([...guessCards, item.id]);\n        }\n      }\n    }, 1000);\n  };\n\n  const restartGame = () => {\n    setTurn(true);\n    setCardsSelected([]);\n    setGuessCards([]);\n  };\n\n  const gameIsFinished = guessCards.length * 2 === listOfCards.length;\n\n  return (\n    <div>\n      <p>Memory Game</p>\n      <button>Arrancar de vuelta</button>\n      <p>Turno del color {turn ? \"Red\" : \"Azul\"}</p>\n      {gameIsFinished && <div onClick={restartGame}>TERMINO</div>}\n      {listOfCards.map((item, idx) => {\n        const alreadyGuess = guessCards.includes(item.id);\n        const isBeingSelcted = cardsSelected.some(x => x.key === item.key);\n        return (\n          <button\n            key={idx}\n            onClick={() => onClickCard(item)}\n            style={{ backgroundColor: \"blue\", margin: 5 }}\n            disabled={alreadyGuess || isBeingSelcted}\n          >\n            {isBeingSelcted\n              ? \"LA ELIGIERON\"\n              : alreadyGuess\n              ? \"YA LA ADIVINARON\"\n              : \"NADA\"}\n          </button>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}